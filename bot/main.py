import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from decouple import config

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot configuration
BOT_TOKEN = config('TELEGRAM_BOT_TOKEN')
WEBHOOK_URL = config('TELEGRAM_WEBHOOK_URL', default='')
WEBHOOK_PATH = '/webhook'
WEBAPP_URL = config('WEBAPP_URL', default='http://localhost:3000')

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(CommandStart())
async def start_command(message: types.Message):
    """Handle /start command."""
    user = message.from_user
    
    # Welcome message
    welcome_text = f"""
üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GOdrive!

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–º—É —ç–∫–∑–∞–º–µ–Ω—É –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –≤ –ê—Ä–º–µ–Ω–∏–∏.

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üìö –ò–∑—É—á–∞—Ç—å –±–∏–ª–µ—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ üß™ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
    """
    
    # Create keyboard with WebApp button
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ]
        ]
    )
    
    await message.answer(welcome_text, reply_markup=keyboard)


@dp.message(Command('help'))
async def help_command(message: types.Message):
    """Handle /help command."""
    help_text = """
üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/app - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è - –∏–∑—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
‚Ä¢ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ]
        ]
    )
    
    await message.answer(help_text, reply_markup=keyboard)


@dp.message(Command('app'))
async def app_command(message: types.Message):
    """Handle /app command."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ]
        ]
    )
    
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)


@dp.message()
async def handle_message(message: types.Message):
    """Handle other messages."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ]
        ]
    )
    
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
        reply_markup=keyboard
    )


async def on_startup():
    """Bot startup actions."""
    logger.info("Bot is starting up...")
    
    if WEBHOOK_URL:
        # Set webhook
        webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
        await bot.set_webhook(webhook_url)
        logger.info(f"Webhook set to: {webhook_url}")
    else:
        logger.info("Running in polling mode")


async def on_shutdown():
    """Bot shutdown actions."""
    logger.info("Bot is shutting down...")
    
    if WEBHOOK_URL:
        # Remove webhook
        await bot.delete_webhook()
        logger.info("Webhook removed")


def create_app():
    """Create aiohttp application for webhook."""
    app = web.Application()
    
    # Setup webhook handler
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    
    # Setup application
    setup_application(app, dp, bot=bot)
    
    return app


async def main():
    """Main function."""
    if WEBHOOK_URL:
        # Run with webhook
        app = create_app()
        
        # Start web server
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', 8080)
        await site.start()
        
        logger.info("Bot is running with webhook on port 8080")
        
        # Keep running
        try:
            await asyncio.Future()  # Run forever
        except KeyboardInterrupt:
            logger.info("Shutting down...")
        finally:
            await runner.cleanup()
    else:
        # Run in polling mode
        await on_startup()
        
        try:
            await dp.start_polling(bot)
        except KeyboardInterrupt:
            logger.info("Shutting down...")
        finally:
            await on_shutdown()


if __name__ == '__main__':
    asyncio.run(main())

